#include <iostream>
#include <string>
#include <bitset>

class Main {
private:
    static const std::string SBOX[4][4];
    static const std::string SBOX_INV[4][4];
    static std::string key0, key1, key2;
    static int encryptionConstantMatrix[2][2];
    static int decryptionConstantMatrix[2][2];

public:
    Main(std::string key) {
        generateKeys(key);
    }

    int binaryToDecimal(std::string binary) {
        return std::stoi(binary, nullptr, 2);
    }

    std::string decimalToBinary(int decimal, int binaryStringSize) {
        return std::bitset<8>(decimal).to_string().substr(8 - binaryStringSize);
    }

    std::string stringXOR(std::string a, std::string b) {
        std::string result;
        for (size_t i = 0; i < a.length(); i++) {
            result += char(a[i] ^ b[i]);
        }
        return result;
    }

    int gfMul(int a, int b) {
        int product = 0;

        while (b > 0) {
            if (b & 1)
                product ^= a;

            a <<= 1;

            if (a & (1 << 4))
                a ^= 0b10011;

            b >>= 1;
        }
        return product;
    }

    std::string nibbleSubstitution(std::string input, const std::string SBOX[][4]) {
        std::string result;
        for (size_t i = 0; i < input.length(); i += 4) {
            std::string str = input.substr(i, 4);
            result += SBOX[binaryToDecimal(str.substr(0, 2))][binaryToDecimal(str.substr(2, 2))];
        }
        return result;
    }

    std::string shiftRow(std::string str) {
        std::string result = str.substr(0, 4) + str.substr(12, 4) + str.substr(8, 4) + str.substr(4, 4);
        return result;
    }

    std::string rotateNibble(std::string word) {
        return word.substr(4, 4) + word.substr(0, 4);
    }

    void generateKeys(std::string key) {
        std::string w0 = key.substr(0, 8);
        std::string w1 = key.substr(8, 8);
        std::string w2 = stringXOR(stringXOR(w0, "10000000"), nibbleSubstitution(rotateNibble(w1), SBOX));
        std::string w3 = stringXOR(w2, w1);
        std::string w4 = stringXOR(stringXOR(w2, "00110000"), nibbleSubstitution(rotateNibble(w3), SBOX));
        std::string w5 = stringXOR(w4, w3);

        key0 = w0 + w1;
        key1 = w2 + w3;
        key2 = w4 + w5;
    }

    std::string getKeys() {
        std::string result = "Key0: " + key0 + "\n";
        result += "Key1: " + key1 + "\n";
        result += "Key2: " + key2 + "\n";
        return result;
    }

    std::string encrypt(std::string plainText) {
        std::string roundZeroResult = stringXOR(plainText, key0);
        std::string shiftRowResult = shiftRow(nibbleSubstitution(roundZeroResult, SBOX));

        std::string matrix[2][2];
        matrix[0][0] = shiftRowResult.substr(0, 4);
        matrix[0][1] = shiftRowResult.substr(8, 4);
        matrix[1][0] = shiftRowResult.substr(4, 4);
        matrix[1][1] = shiftRowResult.substr(12, 4);

        std::string result;
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                std::string tempResults[2];
                for (int k = 0; k < 2; k++) {
                    tempResults[k] = decimalToBinary(gfMul(encryptionConstantMatrix[i][k], binaryToDecimal(matrix[k][j])), 4);
                }
                result += stringXOR(tempResults[0], tempResults[1]);
            }
        }

        std::string mixColumnsResult = result.substr(0, 4) + result.substr(8, 4) + result.substr(4, 4) + result.substr(12, 4);
        std::string roundOneResult = stringXOR(mixColumnsResult, key1);

        std::string roundTwoResult = stringXOR(shiftRow(nibbleSubstitution(roundOneResult, SBOX)), key2);
        return roundTwoResult;
    }

    std::string decrypt(std::string cipherText) {
        std::string roundZeroResult = stringXOR(cipherText, key2);
        std::string addKeyResult = stringXOR(nibbleSubstitution(shiftRow(roundZeroResult), SBOX_INV), key1);

        std::string matrix[2][2];
        matrix[0][0] = addKeyResult.substr(0, 4);
        matrix[0][1] = addKeyResult.substr(8, 4);
        matrix[1][0] = addKeyResult.substr(4, 4);
        matrix[1][1] = addKeyResult.substr(12, 4);

        std::string result;
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                std::string tempResults[2];
                for (int k = 0; k < 2; k++) {
                    tempResults[k] = decimalToBinary(gfMul(decryptionConstantMatrix[i][k], binaryToDecimal(matrix[k][j])), 4);
                }
                result += stringXOR(tempResults[0], tempResults[1]);
            }
        }

        std::string mixColumnsResult = result.substr(0, 4) + result.substr(8, 4) + result.substr(4, 4) + result.substr(12, 4);
        std::string roundTwoResult = stringXOR(nibbleSubstitution(shiftRow(mixColumnsResult), SBOX_INV), key0);
        return roundTwoResult;
    }
};

const std::string Main::SBOX[4][4] = { {"1001","0100","1010","1011"},{"1101","0001","1000","0101"},{"0110","0010","0000","0011"},{"1100","1110","1111","0111"} };
const std::string Main::SBOX_INV[4][4] = { {"1010","0101","1001","1011"},{"0001","0111","1000","1111"},{"0110","0000","0010","0011"},{"1100","0100","1101","1110"} };
std::string Main::key0 = "", Main::key1 = "", Main::key2 = "";
int Main::encryptionConstantMatrix[2][2] = { {1, 4}, {4, 1} };
int Main::decryptionConstantMatrix[2][2] = { {9, 2}, {2, 9} };

int main() {
    std::string key, msg;
    std::cout << "Enter 16-bit key: ";
    std::cin >> key;

    std::cout << "Enter 16-bit binary form message for encryption: ";
    std::cin >> msg;

    Main simplifiedAdvancedEncryptionStandard(key);
    std::cout << simplifiedAdvancedEncryptionStandard.getKeys() << std::endl;

    std::cout << "\n***** ENCRYPTION *****" << std::endl;
    std::string encryptedMsg = simplifiedAdvancedEncryptionStandard.encrypt(msg);
    std::cout << "Encrypted Message: " << encryptedMsg << std::endl;

    std::cout << "\n***** DECRYPTION *****" << std::endl;
    std::string decryptedMsg = simplifiedAdvancedEncryptionStandard.decrypt(encryptedMsg);
    std::cout << "Decrypted Message: " << decryptedMsg << std::endl;

    return 0;
}